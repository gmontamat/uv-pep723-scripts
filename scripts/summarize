#!/usr/bin/env -S uv run --script
# /// script
# requires-python = ">=3.8"
# dependencies = [
#     "openai",
#     "python-dotenv",
# ]
# ///

import sys
import os
from dotenv import load_dotenv
from openai import AzureOpenAI

# Read transcript from stdin
transcript = sys.stdin.read()
if not transcript.strip():
    print("No transcript provided via stdin.", file=sys.stderr)
    sys.exit(1)

# Load .env file for Azure AI deployment settings
load_dotenv(dotenv_path=os.path.join(os.getcwd(), ".env"))
api_key = os.getenv("AZURE_API_KEY")
azure_endpoint = os.getenv("AZURE_ENDPOINT")
api_version = os.getenv("AZURE_API_VERSION")
deployment_name = os.getenv("DEPLOYMENT_NAME")

if not api_key:
    print("AZURE_API_KEY not found in .env file.", file=sys.stderr)
    sys.exit(1)

if not (azure_endpoint and deployment_name and api_version):
    print("For Azure, BASE_URL, OPENAI_API_VERSION, and DEPLOYMENT_NAME must be set in .env.", file=sys.stderr)
    sys.exit(1)

client = AzureOpenAI(
    api_key=api_key,
    azure_endpoint=azure_endpoint,
    api_version=api_version,
)

# Prepare prompt for summarization
prompt = (
    "Summarize the following video transcript in a concise paragraph:\n\n"
    f"{transcript}\n\nSummary:"
)

try:
    response = client.chat.completions.create(
        model=deployment_name,
        messages=[
            {"role": "system", "content": "You are a helpful assistant that summarizes transcripts."},
            {"role": "user", "content": prompt}
        ],
        max_tokens=300,
        temperature=0.5,
    )
    summary = response.choices[0].message.content.strip()
    print(summary)
except Exception as e:
    print(f"Error: {e}", file=sys.stderr)
    sys.exit(1)
